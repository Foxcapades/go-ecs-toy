package fecs

type Scene interface {
	// EntityCount returns the number of entities currently registered to this
	// Scene.
	EntityCount() int

	// NewEntity creates a new entity and returns an EntityID handle for that new
	// entity.
	NewEntity() EntityID

	// AssignComponent assigns a new component, generated by the given constructor
	// function, to the target entity, returning a ComponentID handle for the new
	// component.
	//
	// If the target entity ID does not exist in this scene this method will
	// panic.
	//
	// If the target entity already has a component of the type returned by the
	// given constructor function, this method will panic.
	AssignComponent(entityID EntityID, constructor ComponentConstructor) ComponentID

	// EntityHasComponent returns whether the target entity has a Component of the
	// given ComponentType.
	//
	// If the given EntityID is invalid or is not registered to this Scene, this
	// method will return false.
	EntityHasComponent(entityID EntityID, componentType ComponentType) bool

	// GetComponentByType returns the Component of the given ComponentType
	// attached to the target entity.
	//
	// If the Component was found on the target entity, this method will return
	// the located Component along with the boolean value true.  If the Component
	// was not found on the target entity, returns nil with the boolean value
	// false.
	//
	// If the given EntityID is invalid or is not registered to this Scene, this
	// method will return nil and false.
	GetComponentByType(entityID EntityID, componentType ComponentType) (Component, bool)

	// GetComponentByID attempts to return the target Component.
	//
	// If the target Component was found in this Scene, the Component will be
	// returned along with the boolean flag true.  If the target component could
	// not be found on this Scene, nil will be returned along with the boolean
	// flag false.
	GetComponentByID(componentID ComponentID) (Component, bool)

	// RemoveEntity removes the target entity from this Scene, also unlinking any
	// attached Components from this Scene as well.
	//
	// Returns a boolean flag indicating whether the target entity was removed
	// from the Scene.  If this method returns false, then the target entity was
	// not found in this Scene to be removed.
	RemoveEntity(entityID EntityID) bool

	// RemoveComponentByType removes a Component of the target ComponentType from
	// the target entity.
	//
	// Returns a boolean flag indicating whether the Component was removed.
	//
	// If the target entity was not found in this Scene, this method returns
	// false.  If no component of the target type could be found on the target
	// entity, this method returns false.
	RemoveComponentByType(entityID EntityID, componentType ComponentType) bool

	// RemoveComponentByID removes the Component identified by ComponentID from
	// the target entity.
	//
	// Returns a boolean flag indicating whether the Component was removed.
	//
	// If the target entity was not found in this Scene, this method returns
	// false.  If no component with the given ComponentID was found attached to
	// the target entity, this method returns false.
	RemoveComponentByID(entityID EntityID, componentID ComponentID) bool

	// Components returns a ComponentView instance that iterates over Component
	// instances of the given ComponentType.
	//
	// If this scene contains no Component instances of the target ComponentType,
	// the returned ComponentView will be empty.
	Components(componentType ComponentType) ComponentView

	// Entities returns an EntityView over entities registered to
	// this Scene that have a component of the target type attached.
	Entities(componentType ComponentType) EntityView
}
